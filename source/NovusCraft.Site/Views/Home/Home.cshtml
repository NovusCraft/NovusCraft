@model object

@{
	ViewBag.Description = "Novus Craft are a software development consultancy delivering top solutions using Sitecore CMS, ASP.NET, ASP.NET MVC and other Microsoft technologies.";
}

<section class="grid_11">
	<header class="visuallyhidden">
		<h1>Recent Articles</h1>
	</header>
	<article class="post">
		<header>
			<h1>@Html.ActionLink("Looking back at 2011", "ViewPost", "Blog", new { slug = "looking-back-at-2011" }, null)</h1>
		</header>
		<p>Another year begins and this is a good opportunity to look back at memorable aspects of 2011.</p>
		<h2>Developed and launched first client website</h2>
		<p>Aside from a few small projects, 2011 was occupied developing <a href="http://www.scottdunn.com/">ScottDunn.com</a>. It was a fun project with a great team and I have learned a lot from it.</p>
		<h2>Developed new website and blog</h2>
		<p>This has been on my list for a long time, so I am very pleased I had some time to set it up. It is far from finished. Lots of outstanding tasks on my <a href="https://github.com/NovusCraft/NovusCraft/issues?sort=created&amp;direction=desc&amp;state=open&amp;page=1&amp;milestone=2" title="Open novuscraft.com issues in GitHub backlog">backlog</a>, so this will keep me busy for a while.</p>
		<h2>Learned a lot</h2>
		<p>Through projects, books and blogs I have learned a lot of new tools and techniques:</p>
		<ul>
			<li>Sitecore customisation, performance optimisation and security hardening</li>
			<li>HTML 5, HTML 5 Boilerplate, CSS 3</li>
			<li>Lots of new jQuery techniques and Backbone.js</li>
			<li>Website performance optimisation</li>
			<li>MVC 3</li>
			<li>Raven DB</li>
		</ul>
		<p>I also took some time out to attend <a href="http://london2011.codeken.com/">CodeKen 2011</a> and met Jon Skeet, Stefan Plattner and many other great people.</p>
		<h2>Kindle has revolutionised the way I read books</h2>
		<p>I bought my first Kindle (3rd generation WiFi model) almost a year ago. I read more books now than I have ever done. In the past year I have read 19 books: 10 technical + 9 non-technical. E-books are a lot cheaper and I was rapidly running out of space for storing my books, so getting a Kindle has paid off in many ways.</p>
		<h2>Good time management is very important</h2>
		<p>One of the reasons I started my own company was so I could invest more time in personal projects. I underestimated just how much time non-technical part of operating a business would absorb. I had to adapt (and fast), so I experimented lots and came up with a more manageable way handle routine tasks:</p>
		<ul>
			<li>Gmail + Getting Things Done to prioritise incoming mail</li>
			<li><a href="http://www.rememberthemilk.com">RemeberTheMilk</a> to organise my tasks and reminders</li>
			<li>Google Calendar to organise future and recurring events</li>
		</ul>
		<p>I also unsubscribed from all non-essential email notifications, cleaned-up RSS feed subscriptions and pretty much stopped watching TV.</p>
		<h2>2012 will be even better</h2>
		<p>I have lots in mind for 2012:</p>
		<ul>
			<li><strong>Continue training my software development skills:</strong> very interested in Raven DB and Sitecore Customer Engagement Platform</li>
			<li><strong>Contribute to an open-source project:</strong> I am considering SquishIt, Noda Time and Lucene.net</li>
			<li><strong>Develop and launch my own open-source project:</strong> haven’t quite decided what I am going to do yet</li>
			<li><strong>Read 12 technical books:</strong> one every month not counting non-technical</li>
			<li><strong>Post 26 articles:</strong> two articles per month not counting meta articles such as this one</li>
		</ul>
		<footer>
			Published by @Html.ActionLink("Arnold Zokas", "About", null, new { rel = "author" }) on <time datetime="2012-01-04T00:40:22+00:00" pubdate>4th January 2012</time> in category <strong>Meta</strong>.
		</footer>
	</article>
	<article class="post">
		<header>
			<h1>@Html.ActionLink("How to implement Raven DB UnitOfWork in an ASP.NET MVC application", "ViewPost", "Blog", new { slug = "how-to-implement-raven-db-unitofwork-in-an-asp-net-mvc-application" }, null)</h1>
		</header>
		<p>I have been looking at ways to implement UnitOfWork pattern for Raven DB. The three implementations I have found did not match my needs, so in the end decided to roll my own.</p>
		<h2>Implementation #1</h2>
		<p>Shiju Varghese&rsquo;s <a href="http://weblogs.asp.net/shijuvarghese/archive/2010/05/26/nosql-with-ravendb-and-asp-net-mvc-part-1.aspx" title="'NoSQL with RavenDB and ASP.NET MVC - Part 1' by Shiju Varghese">NoSQL with RavenDB and ASP.NET MVC - Part 1</a> is the least complicated of the three, but suffers from a few problems:</p>
		<ul>
			<li><strong>Bad <code>IDocumentSession</code> lifetime management:</strong> <code>IDocumentSession</code> lifetime is controlled via HttpApplication <code>BeginRequest</code>/<code>EndRequest</code> event handlers. This makes unit testing complicated</li>
			<li><strong><code>IDocumentSession</code> is exposed as a static property of HttpApplication:</strong> a repository should not have a dependency on HttpApplication. Dependencies like that should be managed via constructor/property injection</li>
			<li><strong>Calls to <code>IDocumentSession.SaveChanges()</code> method at repository level: </strong> this prevents Raven DB from optimising write operations when you make multiple inserts/updates/deletes within a single HttpRequest. <code>SaveChanges()</code> should, in most cases, be called only once and at the end of the request</li>
		</ul>
		<p class="warning">I have been using Raven DB for about 5 hours, so my understanding of its inner workings could be completely wrong. Feel free to point out any errors in the comments.</p>
		<h2>Implementation #2</h2>
		<p>Justin Schwartzenberger&rsquo;s <a href="http://msdn.microsoft.com/en-us/magazine/hh547101.aspx" title="'Embedding RavenDB into an ASP.NET MVC 3 Application' by Justin Schwartzenberger">Embedding RavenDB into an ASP.NET MVC 3 Application</a> takes the shared base Controller class approach.</p>
		<p>I find using custom Controller base class to handle <code>IDocumentSession</code> lifetime messy. It breaks Single Responsibility Principle. The controller should not be responsible for lifetime management of its dependencies. This is an infrastructure concern and should be handled elsewhere.</p>
		<h2>Implementation #3</h2>
		<p>Primary Objects&rsquo; <a href="http://www.primaryobjects.com/CMS/Article125.aspx" title="'Generating Flying Creatures in NoSQL RavenDB with C# ASP .NET MVC Razor' by Primary Objects">Generating Flying Creatures in NoSQL RavenDB with C# ASP .NET MVC Razor</a> is the top ranking result for <a href="http://www.google.co.uk/search?q=ravendb+unitofwork+mvc" title="Google ravendb+unitofwork+mvc">Google search (ravendb+unitofwork+mvc)</a>. It is very close to what I need, but has some unwanted characteristics:</p>
		<ul>
			<li><strong>Wrappers, wrappers and more wrappers:</strong> you don't <em>need</em> a UnitOfWork wrapper with Raven DB. The same lifetime management logic can be handled by a properly configured IOC/DI framework</li>
			<li><strong>Weighty Repository pattern implementation:</strong> I like my repositories lean: plain class with some get/put/delete methods</li>
			<li><strong>Calls to <code>IDocumentSession.SaveChanges()</code> method at repository level:</strong> <em>same comments as Implementation 1</em></li>
		</ul>
		<h2>Requirements</h2>
		<p>I am looking for a solution that:</p>
		<ul>
			<li>Disposes Raven DB <code>IDocumentSession</code> automatically at the end of the HttpRequest</li>
			<li>Calls <code>IDocumentSession.SaveChanges()</code> automatically at the end of the HttpRequest</li>
			<li>Does not rely on custom Controller base class</li>
			<li>Is testable and has 100% coverage</li>
			<li>Is clean (self-contained)</li>
			<li>Is simple (no wrappers)</li>
		</ul>
		<h2>My implementation</h2>
		<p>Borrowing some concepts from other solutions, I have put together a basic implementation that satisfies these requirements. I am using StructureMap, but this can probably be easily replicated with any other IOC/DI frameworks.</p>
		<pre><code class="c#">public class MvcApplication : HttpApplication
{
	public void Application_Start()
	{
		// initialise StructureMap
		ObjectFactory.Initialize(iex => {
			iex.ForSingletonOf&lt;IDocumentStore&gt;()
			   .Use(DocumentStoreFactory.CreateDocumentStore());
		
			iex.For&lt;IDocumentSession&gt;()
			   .HybridHttpOrThreadLocalScoped()
			   .Use(c => c.GetInstance&lt;IDocumentStore&gt;().OpenSession());
		});
		
		// register global filters, register routes, etc...
	}

	public void Application_EndRequest()
	{
		var model = ObjectFactory.Container.Model;
		var reference = model.InstancesOf&lt;IDocumentSession&gt;().Single();

		if (reference.ObjectHasBeenCreated() == false)
			return; // object was not constructed so there is nothing to do
		
		var documentSession = ObjectFactory.GetInstance&lt;IDocumentSession&gt;();
		documentSession.SaveChanges();
		documentSession.Dispose();
	}
}</code></pre>
<pre><code class="c#">public static class DocumentStoreFactory
{
	public static IDocumentStore CreateDocumentStore()
	{
		var documentStore = new DocumentStore();
		documentStore.ConnectionStringName = "Raven";
		documentStore.Initialize();

		return documentStore;
	}
}</code></pre>
<pre><code class="c#">public class SampleRepository : ISampleRepository
{
	readonly IDocumentSession _documentSession;

	public SampleRepository(IDocumentSession documentSession)
	{
		_documentSession = documentSession;
	}

	public void UpdateSomething(Something something)
	{
		documentSession.Store(something);
	}
}</code></pre>
		<p>Highlights:</p>
		<ul>
			<li>Lightweight</li>
			<li>Fully testable</li>
			<li><code>IDocumentSession</code> lifetime managed via StructureMap</li>
		</ul>
		<p>For implementation and test examples have a look at <a href="https://github.com/NovusCraft/NovusCraft" title="novuscraft.com project on GitHub">novuscraft.com Git repository</a>.</p>
		<footer>
			Published by @Html.ActionLink("Arnold Zokas", "About", null, new { rel = "author" }) on <time datetime="2011-11-29T12:49:22+00:00" pubdate>29th November 2011</time> in category <strong>Databases</strong>.
		</footer>
	</article>
	<article class="post">
		<header>
			<h1>@Html.ActionLink("Hello, Raven DB", "ViewPost", "Blog", new { slug = "hello-raven-db" }, null)</h1>
		</header>
		<p>Goodbye, hard-coded HTML &mdash; hello, <a href="http://ravendb.net/" title="Raven is an Open Source (with a commercial option) document database for the .NET/Windows platform.">Raven DB</a>. I finally managed to find some time to have a good think about my persistence strategy. Raven DB has been on my radar since it was first announced by Ayende, but I had no opportunity to use it until now.</p>
		<p>This is my first Raven DB implementation and so far I am pleased with the way it is going:</p>
		<ul>
			<li><strong>It is very easy to pick up and just feels natural:</strong> it took me about an hour to implement basic <em>display blog post</em> functionality</li>
			<li><strong>It took about 15 lines of code to implement:</strong> including UnitOfWork and StructureMap wiring, excluding specifications and the usual IRepository scaffolding</li>
			<li><strong>It is incredibly fast:</strong> I am using the embedded mode, so there is no network cost</li>
			<li><strong>There is a strong community growing around it:</strong> as evidenced by <a href="http://stackoverflow.com/questions/tagged/ravendb" title="StackOverflow questions tagged Raven DB">StackOverflow</a> and <a href="http://www.google.co.uk/search?q=ravendb+get+started" title="Google search results for 'ravendb get started'">Google</a></li>
			<li><strong>The project has great visibility:</strong> it is available publicly <a href="https://github.com/ravendb/ravendb" title="Raven DB project on GitHub">on GitHub</a>, so you can play around with the source and <a href="https://github.com/ravendb/ravendb/issues" title="Raven DB issues">post bug reports</a> (Ayende usually replies very quickly, the man never rests)</li>
		</ul>
		<p>Another thing worth mentioning is that API is not yet stable, so there are articles containing outdated code samples. Of course, this will change as Raven DB gains adoption.</p>
		<footer>
			Published by @Html.ActionLink("Arnold Zokas", "About", null, new { rel = "author" }) on <time datetime="2011-11-22T00:40:21+00:00" pubdate>22nd November 2011</time> in category <strong>Databases</strong>.
		</footer>
	</article>
	<article class="post">
		<header>
			<h1>@Html.ActionLink("Getting started with MSpec", "ViewPost", "Blog", new { slug = "getting-started-with-mspec" }, null)</h1>
		</header>
		<p>I am a long-time fan of <a href="http://xunit.codeplex.com/" title="xUnit.net project on CodePlex">xUnit.net</a>. I have been using it since it was in early beta and it is my default choice for almost any project. For building Novus Craft, I decided to use something new and very different &mdash; a Context/Specification framework called <a href="https://github.com/machine/machine.specifications" title="Machine.Specification project on GitHub">Machine.Specifications</a>.</p>
		<p>On my journey to learn MSpec, I have come across a number of helpful tips, instructions and tweaks, so I decided to put together a quick guide on how to get started. I am not going to talk about why or when you should use MSpec. If you want to read about that, check out Aaron Jensen&rsquo;s <a href="http://codebetter.com/aaronjensen/2008/05/08/introducing-machine-specifications-or-mspec-for-short/" title="">Introducing Machine.Specifications (or MSpec for short)</a>. Instead, I will focus on how to setup your development environment.</p>
		<h2>How to get MSpec</h2>
		<h3>Install MSpec via NuGet package manager</h3>
		<p>Open NuGet Package Manager Console and enter one of the following commands:</p>
		<ul>
			<li>
				To download and install an unsigned release:<br>
				<code>PM> Install-Package Machine.Specifications</code>
			</li>
			<li>
				To download and install a signed release:<br>
				<code>PM> Install-Package Machine.Specifications-Signed</code>
			</li>
		</ul>
		<h3>Download latest MSpec binaries from CodeBetter CI server</h3>
		<p>You can download the latest build directly from CodeBetter Continuous Integration server:</p>
		<ul>
			<li><a href="http://teamcity.codebetter.com/guestAuth/repository/download/bt342/.lastSuccessful/Machine.Specifications-Release.zip" title="Latest unsigned MSpec build on CodeBetter.com CI server">Latest unsigned build</a></li>
			<li><a href="http://teamcity.codebetter.com/guestAuth/repository/download/bt345/.lastSuccessful/Machine.Specifications-Signed-Release.zip" title="Latest signed MSpec build on CodeBetter.com CI server">Latest signed build</a></li>
		</ul>
		<h3>Compile MSpec yourself from source available on GitHub</h3>
		<p>MSpec is an open-source project, so you can simply pull down the latest source using Git and compile it yourself. Check out <a href="https://github.com/machine/machine.specifications/blob/master/README.markdown" title="MSpec readme file">MSpec readme file</a> for more information.</p>
		<h2>How to setup MSpec with ReSharper</h2>
		<p>If you use something other than ReSharper you can skip this stage. If you are not using <em>any</em> productivity plugin &mdash; install <a href="http://www.jetbrains.com/resharper/download/index.html" title="ReSharper download page">ReSharper</a> right now (you will thank me later).</p>
		<h3>Install ReSharper runner</h3>
		<p>Default installation of ReSharper has no knowledge of what an MSpec specification is. To enable MSpec support you need to install a ReSharper plugin.</p>
		<p>MSpec provides plugins compatible with ReSharper v4.1, v4.5, v5.0, v5.1, v6.0 for Visual Studio 2008 and 2010. To install the plugin you need to open MSpec installation directory and execute on the following scripts:</p>
		<ul>
			<li>
				ReSharper v4.1<br>
				<code>InstallResharperRunner.4.1.bat</code>
			</li>
			<li>
				ReSharper v4.5<br>
				<code>InstallResharperRunner.4.5.bat</code>
			</li>
			<li>
				ReSharper v5.0 on Visual Studio 2008<br>
				<code>InstallResharperRunner.5.0 - VS2008.bat</code>
			</li>
			<li>
				ReSharper v5.0 on Visual Studio 2010<br>
				<code>InstallResharperRunner.5.0 - VS2010.bat</code>
			</li>
			<li>
				ReSharper v5.1 on Visual Studio 2008<br>
				<code>InstallResharperRunner.5.1 - VS2008.bat</code>
			</li>
			<li>
				ReSharper v5.1 on Visual Studio 2010<br>
				<code>InstallResharperRunner.5.1 - VS2010.bat</code>
			</li>
			<li>
				ReSharper v6.0 on Visual Studio 2008<br>
				<code>InstallResharperRunner.6.0 - VS2008.bat</code>
			</li>
			<li>
				ReSharper v6.0 on Visual Studio 2010<br>
				<code>InstallResharperRunner.6.0 - VS2010.bat</code>
			</li>
		</ul>
		<h3>Configure ReSharper Naming Rules for MSpec</h3>
		<p>One of the things you will notice straight away is ReSharper doesn't like MSpec naming conventions. Fortunately, you can configure ReSharper to understand MSpec naming conventions and even warn you when you are not naming you specifications correctly. Derek Greer&rsquo;s article (<a href="http://www.aspiringcraftsman.com/2010/02/11/resharper-naming-style-for-machine-specifications/">Resharper Naming Style for Machine.Specifications</a>) explains how to do this correctly.</p>
		<h3>Suppress &lsquo;Field is never used&rsquo; warnings</h3>
		<p>MSpec specifications are defined using private fields. MSpec uses reflection to analyse specifications at runtime, so naturally, there are no references to those private fields. Visual Studio&rsquo;s code analysis engine reports them as unused (this behaviour is by design <em>and</em> is correct. It&rsquo;s just not correct in the context of MSpec specifications).</p>
		<p>You can override this behaviour via project properties. This approach works at project-level and does not affect other projects in the solution:</p>
		<ol>
			<li>Open <code>Properties</code> for your MSpec project</li>
			<li>Select <code>Build</code> tab</li>
			<li>Enter <strong>169</strong> into <code>Supress warnings</code> field</li>
			<li>Save (this will take immediate effect)</li>
		</ol>
		<h2>Other Resources</h2>
		<p>I hope you found this information useful. There are lots of other resources available. Check out Byron Sommardahl&rsquo;s <a href="http://www.awkwardcoder.com/index.php/2010/04/13/how-to-mspec/">How to MSpec?</a> for lots of useful links. Another good place is <a href="http://stackoverflow.com/questions/tagged/mspec?sort=newest">StackOveflow questions tagged with MSpec</a>.</p>
		<footer>
			Published by @Html.ActionLink("Arnold Zokas", "About", null, new { rel = "author" }) on <time datetime="2011-11-19T16:58:37+00:00" pubdate>19th November 2011</time> in category <strong>Testing</strong>.
		</footer>
	</article>
	<article class="post">
		<header>
			<h1>@Html.ActionLink("Welcome to my blog", "ViewPost", "Blog", new { slug = "welcome-to-my-blog" }, null)</h1>
		</header>
		<p>I have been wanting to set one up for a while, but for various reasons kept postponing. One of the things that prompted me to start a blog is my desire to learn ASP.NET MVC. I could not think of a better way to learn than building a blogging engine.</p>
		<p>Currently, the blog engine is just a skeleton implementation constructed with ASP.NET MVC 3 (C# 4 + Razor views) and HTML5 + CSS3 + jQuery. Source code is available publicly on <a href="https://github.com/NovusCraft/NovusCraft" title="novuscraft.com project on GitHub">GitHub</a>.</p>
		<p>My other reason for starting a blog is I <del>want</del> need a place where I can share my discoveries and ideas. It bugs me that every time I have solved a rare challenge (rare in a sense that Google had no answer to it) I have not shared the solution.</p>
		<p>I have lots of things on my <a href="https://github.com/NovusCraft/NovusCraft/issues?sort=created&direction=desc&state=open&page=1&milestone=2" title="Open novuscraft.com issues in GitHub backlog">backlog</a> (<a href="http://ravendb.net/" title="RavenDB - an Open Source document database for the .NET/Windows platform">RavenDB</a>, <a href="https://github.com/jetheredge/SquishIt" title="SquishIt lets you squish some JavaScript and CSS">SquishIt</a>, and more), so this should keep me busy for a while.</p>
		<footer>
			Published by @Html.ActionLink("Arnold Zokas", "About", null, new { rel = "author" }) on <time datetime="2011-10-23T22:50:00+00:00" pubdate>23rd October 2011</time> in category <strong>Meta</strong>.
		</footer>
	</article>
</section>